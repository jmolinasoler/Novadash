<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NovaDashboard</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        .refresh-toggle {
            text-align: right;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>NovaDashboard</h1>
        <div class="refresh-toggle">
            <label for="autoRefresh">Auto-refresh every 5s:</label>
            <input type="checkbox" id="autoRefresh" checked>
        </div>
        <% if (!error) { %> <%# Only render dashboard content if no critical error %>
            <!-- Latest Blocks and Mempool Content Section (Side-by-Side) -->
            <div class="grid">
                <% if (latestBlocks && latestBlocks.length > 0) { %>
                    <div class="card">
                        <h2>Latest Blocks <small>(Last 20)</small></h2>
                        <table class="mempool-table">
                            <thead>
                                <tr>
                                    <th>Height</th>
                                    <th>Hash</th>
                                    <th>Transactions</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody id="latest-blocks-body">
                                <% latestBlocks.forEach(block => { %>
                                    <tr>
                                        <td><%= block.height.toLocaleString() %></td>
                                        <td class="txid-cell">
                                            <a href="#" title="<%= block.hash %>" onclick="event.preventDefault(); document.querySelector('input[name=blockhash]').value='<%= block.hash %>'; document.querySelector('form[action=\'/block\']').submit();">
                                                <%= block.hash.substring(0, 10) %>...<%= block.hash.substring(block.hash.length - 10) %>
                                            </a>
                                        </td>
                                        <td><%= block.nTx.toLocaleString() %></td>
                                        <td><%= new Date(block.time * 1000).toLocaleTimeString() %></td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                <% } %>

                <% if (mempoolTransactions && mempoolTransactions.length > 0) { %>
                    <div class="card">
                        <h2>Mempool Transactions <small>(Top 20 by Fee Rate)</small></h2>
                        <table class="mempool-table">
                            <thead>
                                <tr>
                                    <th>TXID</th>
                                    <th>Fee Rate (sat/vB)</th>
                                    <th>Size (vB)</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody id="mempool-txs-body">
                                <% mempoolTransactions.forEach(tx => { %>
                                    <tr>
                                        <td class="txid-cell">
                                            <a href="#" title="<%= tx.txid %>" onclick="event.preventDefault(); document.querySelector('input[name=txid]').value='<%= tx.txid %>'; document.querySelector('form[action=\'/tx\']').submit();">
                                                <%= tx.txid.substring(0, 10) %>...<%= tx.txid.substring(tx.txid.length - 10) %>
                                            </a>
                                        </td>
                                        <td><%= tx.feeRate.toFixed(2) %></td>
                                        <td><%= tx.vsize.toLocaleString() %></td>
                                        <td><%= new Date(tx.time * 1000).toLocaleTimeString() %></td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                <% } %>
            </div>
            <!-- Lookup Section -->
            <div class="grid">
                <div class="card">
                    <h2>Lookup Block</h2>
                    <form action="/block" method="POST">
                        <input type="text" name="blockhash" placeholder="Enter Block Hash" required>
                        <button type="submit">Find Block</button>
                        <button type="button" class="secondary-button" onclick="lookupGenesisBlock()">Show Genesis Block</button>
                    </form>
                </div>
                <div class="card">
                    <h2>Lookup Transaction</h2>
                    <form action="/tx" method="POST">
                        <input type="text" name="txid" placeholder="Enter Transaction ID (TXID)" required>
                        <button type="submit">Find Transaction</button>
                    </form>
                </div>
            </div>
            <!-- Details Section -->
            <!-- General Info Section -->
            <div class="grid">
                <div class="card">
                    <h2>Blockchain Info</h2>
                    <p><strong>Chain:</strong> <span id="info-chain"><%= blockchainInfo.chain %></span></p>
                    <p><strong>Blocks:</strong> <span id="info-blocks"><%= blockchainInfo.blocks.toLocaleString() %></span></p>
                    <p><strong>Headers:</strong> <span id="info-headers"><%= blockchainInfo.headers.toLocaleString() %></span></p>
                    <p><strong>Difficulty:</strong> <span id="info-difficulty"><%= blockchainInfo.difficulty %></span></p>
                    <p><strong>Verification:</strong> <span id="info-verification"><%= (blockchainInfo.verificationprogress * 100).toFixed(2) %></span>%</p>
                    <p><strong>Pruned:</strong> <%= blockchainInfo.pruned %></p>
                </div>
                <div class="card">
                    <h2>Network Info</h2>
                    <p><strong>Version:</strong> <%= networkInfo.subversion %></p>
                    <p><strong>Connections:</strong> <%= networkInfo.connections_in %> in / <%= networkInfo.connections_out %> out</p>
                    <p><strong>Total Connections:</strong> <%= networkInfo.connections %></p>
                    <p><strong>Local Services:</strong> <%= networkInfo.localservicesnames.join(', ') %></p>
                    <p><strong>Time Offset:</strong> <%= networkInfo.timeoffset %>s</p>
                </div>
                <div class="card">
                    <h2>Mempool Info</h2>
                    <p><strong>Transactions:</strong> <span id="mempool-tx-count"><%= mempoolInfo.size.toLocaleString() %></span></p>
                    <p><strong>Usage:</strong> <span id="mempool-usage"><%= (mempoolInfo.usage / 1024 / 1024).toFixed(2) %></span> MB</p>
                    <p><strong>Max Mempool:</strong> <span id="max-mempool"><%= (mempoolInfo.maxmempool / 1024 / 1024).toFixed(2) %></span> MB</p>
                    <p><strong>Min Fee (sat/vB):</strong> <span id="min-fee"><%= (mempoolInfo.mempoolminfee * 100000).toFixed(2) %></span></p>
                </div>
            </div>
            
            

        <% } %> <%# End of if (!error) %>
    </div>

    <!-- Block Details Modal Structure -->
    <div id="blockDetailsModalOverlay" class="modal-overlay">
        <div class="modal-content card details">
            <a href="/" class="close-button" title="Close" onclick="closeBlockDetailsModal()">&times;</a>
            <h2>Block Details: <small id="blockDetailsHash"></small></h2>
            <pre><code id="blockDetailsContent"></code></pre>
        </div>
    </div>

    <!-- Transaction Details Modal Structure -->
    <div id="txDetailsModalOverlay" class="modal-overlay">
        <div class="modal-content card details">
            <a href="/" class="close-button" title="Close" onclick="closeTxDetailsModal()">&times;</a>
            <h2>Transaction Details: <small id="txDetailsTxid"></small></h2>
            <pre><code id="txDetailsContent"></code></pre>
        </div>
    </div>

    <!-- Error Modal Structure (always in DOM, hidden by default) -->
    <div id="errorModalOverlay" class="modal-overlay">
        <div class="modal-content card error">
            <a href="#" class="close-button" title="Close" onclick="closeErrorModal()">&times;</a>
            <h2>Connection Error</h2>
            <pre id="errorModalMessage"></pre>
        </div>
    </div>

    <script>
        // Data passed from server for details
        const blockDetails = <%- JSON.stringify(blockDetails || null) %>;
        const txDetails = <%- JSON.stringify(txDetails || null) %>;

        // Function to handle Genesis Block lookup
        function lookupGenesisBlock() {
            const genesisHash = '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f';
            const blockHashInput = document.querySelector('input[name=blockhash]');
            const blockForm = document.querySelector('form[action=\'/block\']');
            blockHashInput.value = genesisHash;
            blockForm.submit();
        }

        // Function to close the error modal (and redirect to home)
        // Function to close the error modal
        function closeErrorModal() {
            document.getElementById('errorModalOverlay').style.display = 'none';
            window.location.href = '/'; // Redirect to home page
        }

        // Functions to open/close Block Details Modal
        function openBlockDetailsModal(details) {
            document.getElementById('blockDetailsHash').textContent = details.hash.substring(0, 20) + '...';
            document.getElementById('blockDetailsContent').textContent = JSON.stringify(details, null, 2);
            document.getElementById('blockDetailsModalOverlay').style.display = 'flex';
        }

        function closeBlockDetailsModal() {
            document.getElementById('blockDetailsModalOverlay').style.display = 'none';
            window.location.href = '/'; // Redirect to home page
        }

        // Functions to open/close Transaction Details Modal
        function openTxDetailsModal(details) {
            document.getElementById('txDetailsTxid').textContent = details.txid.substring(0, 20) + '...';
            document.getElementById('txDetailsContent').textContent = JSON.stringify(details, null, 2);
            document.getElementById('txDetailsModalOverlay').style.display = 'flex';
        }

        function closeTxDetailsModal() {
            document.getElementById('txDetailsModalOverlay').style.display = 'none';
            window.location.href = '/'; // Redirect to home page
        }

        // Check if an error message was passed from the server and show the modal
        <% if (error) { %>
            document.getElementById('errorModalMessage').textContent = `<%= error %>`;
            document.getElementById('errorModalOverlay').style.display = 'flex'; // Use flex for centering the modal
        <% } %>

        // Check if blockDetails or txDetails were passed and show respective modals
        if (blockDetails) {
            openBlockDetailsModal(blockDetails);
        }

        if (txDetails) {
            openTxDetailsModal(txDetails);
        }

        // Format the initial difficulty value on page load
        const initialDifficultyElem = document.getElementById('info-difficulty');
        initialDifficultyElem.textContent = formatDifficulty(initialDifficultyElem.textContent);

        // --- Auto-Refresh Logic ---
        const autoRefreshCheckbox = document.getElementById('autoRefresh');
        let refreshIntervalId = null;

        function updateBlocksTable(blocks) {
            const tbody = document.getElementById('latest-blocks-body');
            if (!tbody) return;
            tbody.innerHTML = ''; // Clear existing rows
            blocks.forEach(block => {
                const row = `
                    <tr>
                        <td>${block.height.toLocaleString()}</td>
                        <td class="txid-cell">
                            <a href="#" title="${block.hash}" onclick="event.preventDefault(); document.querySelector('input[name=blockhash]').value='${block.hash}'; document.querySelector('form[action=\\'/block\\']').submit();">
                                ${block.hash.substring(0, 10)}...${block.hash.substring(block.hash.length - 10)}
                            </a>
                        </td>
                        <td>${block.nTx.toLocaleString()}</td>
                        <td>${new Date(block.time * 1000).toLocaleTimeString()}</td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function updateMempoolTable(txs) {
            const tbody = document.getElementById('mempool-txs-body');
            if (!tbody) return;
            tbody.innerHTML = ''; // Clear existing rows
            txs.forEach(tx => {
                const row = `
                    <tr>
                        <td class="txid-cell">
                            <a href="#" title="${tx.txid}" onclick="event.preventDefault(); document.querySelector('input[name=txid]').value='${tx.txid}'; document.querySelector('form[action=\\'/tx\\']').submit();">
                                ${tx.txid.substring(0, 10)}...${tx.txid.substring(tx.txid.length - 10)}
                            </a>
                        </td>
                        <td>${tx.feeRate.toFixed(2)}</td>
                        <td>${tx.vsize.toLocaleString()}</td>
                        <td>${new Date(tx.time * 1000).toLocaleTimeString()}</td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        /**
         * Formats a large number into a human-readable string with metric prefixes (T, G, M, K).
         * @param {number|string} difficulty The number to format.
         * @returns {string} The formatted string.
         */
        function formatDifficulty(difficulty) {
            const d = parseFloat(difficulty);
            if (d >= 1e15) { return (d / 1e15).toFixed(2) + ' P'; } // Peta
            if (d >= 1e12) { return (d / 1e12).toFixed(2) + ' T'; } // Tera
            if (d >= 1e9)  { return (d / 1e9).toFixed(2)  + ' G'; } // Giga
            if (d >= 1e6)  { return (d / 1e6).toFixed(2)  + ' M'; } // Mega
            if (d >= 1e3)  { return (d / 1e3).toFixed(2)  + ' K'; } // Kilo
            return d.toLocaleString('en-US');
        }

        function updateStats(blockchainInfo, mempoolInfo) {
            document.getElementById('info-blocks').textContent = blockchainInfo.blocks.toLocaleString();
            document.getElementById('info-headers').textContent = blockchainInfo.headers.toLocaleString();
            document.getElementById('info-difficulty').textContent = formatDifficulty(blockchainInfo.difficulty);
            document.getElementById('info-verification').textContent = (blockchainInfo.verificationprogress * 100).toFixed(2);
            document.getElementById('mempool-tx-count').textContent = mempoolInfo.size.toLocaleString();
            document.getElementById('mempool-usage').textContent = (mempoolInfo.usage / 1024 / 1024).toFixed(2);
            document.getElementById('min-fee').textContent = (mempoolInfo.mempoolminfee * 100000).toFixed(2);
        }

        async function fetchAndUpdateData() {
            try {
                const response = await fetch('/api/update');
                if (!response.ok) throw new Error(`API request failed with status ${response.status}`);
                const data = await response.json();
                updateBlocksTable(data.latestBlocks);
                updateMempoolTable(data.mempoolTransactions);
                updateStats(data.blockchainInfo, data.mempoolInfo);
            } catch (error) {
                console.error('Auto-refresh failed:', error);
                stopAutoRefresh();
                autoRefreshCheckbox.checked = false;
            }
        }

        function startAutoRefresh() {
            if (refreshIntervalId === null) {
                fetchAndUpdateData(); // Initial fetch
                refreshIntervalId = setInterval(fetchAndUpdateData, 5000);
            }
        }

        function stopAutoRefresh() {
            clearInterval(refreshIntervalId);
            refreshIntervalId = null;
        }

        autoRefreshCheckbox.addEventListener('change', (e) => e.target.checked ? startAutoRefresh() : stopAutoRefresh());

        if (autoRefreshCheckbox.checked) {
            startAutoRefresh();
        }
    </script>
</body>
</html>